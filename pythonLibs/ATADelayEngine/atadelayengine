#!/usr/bin/env python
import numpy as np
import toml

import hashlib

import logging
from datetime import datetime

import astropy.constants as const
from astropy.coordinates import ITRS, SkyCoord, AltAz, EarthLocation
from astropy.time import Time,TimeDelta
import astropy.units as u
import pandas as pd
import time

import argparse

import requests

from SNAPobs import snap_control, snap_config
from ATATools import ata_control


from ATATools.ata_rest import ATARestException


ALL_LO = ["a", "b", "c", "d"]

DEFAULT_REF_ANT = "1C" #1c is a performant antenna
MAX_SAMP_DELAY = 16384
CLOCK_FREQ = 2.048e9 #Gsps
ADC_SAMP_TIME = 1/CLOCK_FREQ

MAX_DELAY = MAX_SAMP_DELAY * ADC_SAMP_TIME #seconds
ADVANCE_TIME = MAX_DELAY/2

BANDWIDTH = CLOCK_FREQ/2. #Hz

# Get leapseconds now
_t_utc = Time(datetime.utcnow(), scale='utc')
LEAP_SECONDS = (_t_utc.tai.value - _t_utc.value).seconds

def compute_uvw(ts, source, ant_coordinates, ref_coordinates):
    """Computes UVW antenna coordinates with respect to reference

    Args:
        ts: array of Times to compute the coordinates
        source: source SkyCoord
        ant_coordinates: antenna ECEF coordinates.
             This is indexed as (antenna_number, xyz)
        ref_coordinates: phasing reference centre coordinates.
             This is indexed as (xyz)

    Returns:
        The UVW coordinates in metres of each of the baselines formed
        between each of the antennas and the phasing reference. This
        is indexed as (time, antenna_number, uvw)
    """
    baselines_itrs = ant_coordinates - ref_coordinates

    # Calculation of vector orthogonal to line-of-sight
    # and pointing due north.
    north_radec = [source.ra.deg, source.dec.deg + 90]
    if north_radec[1] > 90:
        north_radec[1] = 180 - north_radec[1]
        north_radec[0] = 180 + north_radec[0]
    north = SkyCoord(ra=north_radec[0]*u.deg, dec=north_radec[1]*u.deg)

    source_itrs = source.transform_to(ITRS(obstime=Time(ts))).cartesian
    north_itrs = north.transform_to(ITRS(obstime=Time(ts))).cartesian
    east_itrs = north_itrs.cross(source_itrs)

    ww = baselines_itrs @ source_itrs.xyz.value
    vv = baselines_itrs @ north_itrs.xyz.value
    uu = baselines_itrs @ east_itrs.xyz.value
    uvw = np.stack((uu.T, vv.T, ww.T), axis=-1)

    return uvw


def parse_toml(toml_dict):
    """
    Parse a toml file as a pandas dataframe
    with columns of [x,y,z]
    """
    df = pd.DataFrame()
    df = df.from_dict(toml_dict['antennas'])[['name','position']]
    df.index = np.char.upper(list(df['name']))
    df = df.drop(columns=['name'])

    pos = np.array([i for i in df['position'].values])
    df = df.drop(columns=['position'])
    df['x'] = pos[:,0]
    df['y'] = pos[:,1]
    df['z'] = pos[:,2]
    return df


def parse_yaml(yaml_fname):
    raise NotImplementedError("yaml parsing not implemented yet")


def load_bandpass(phases_file_name, antnames):
    """
    Load the bandpass calibration phase file while selecting antennas
    """
    phases_all = pd.read_csv(phases_file_name, sep=" ", index_col=False)

    phases_x = []
    phases_y = []

    for ant in np.char.lower(np.array(antnames)):
        phases_x.append(phases_all[ant+"x"])
        phases_y.append(phases_all[ant+"y"])

    return phases_x, phases_y


def load_fixed_delays(fixed_file_name, antnames):
    """
    Load the fixed delay calibration file while selecting antennas
    """
    fixed_delays_all = pd.read_csv(fixed_file_name, sep=" ", index_col=None)

    fixed_delays_x = []
    fixed_delays_y = []

    for ant in np.char.lower(np.array(antnames)):
        if ant not in list(fixed_delays_all.values[:,0]):
            raise RuntimeError("Antenna %s not in the fixed delays list!" %ant)
        fixed_delays_x.append(
                fixed_delays_all[fixed_delays_all.values[:,0] == ant].values[:,1][0])
        fixed_delays_y.append(
                fixed_delays_all[fixed_delays_all.values[:,0] == ant].values[:,2][0])

    fixed_delays_x = np.array(fixed_delays_x)*1e-9
    fixed_delays_y = np.array(fixed_delays_y)*1e-9

    return fixed_delays_x, fixed_delays_y


def update_bandpass(rfsocs, phases_x, phases_y):
    for rfsoc, phase_calx, phase_caly in zip(rfsocs, phases_x, phases_y):
        rfsoc.set_phase_calibration(0, -phase_calx)
        rfsoc.set_phase_calibration(1, -phase_caly)


def get_hash(fname):
    with open(fname, "rb") as f:
        fhash = hashlib.md5(f.read()).hexdigest()
    return fhash


def unix2jd(unix):
    """
    convert unix time second to julian date
    """
    jd = unix / 86400 + 2440587.5
    return jd

def jd2unix(jd):
    """
    convert julian date to unix time second
    """
    unix = (jd - 2440587.5) * 86400
    return unix


def create_fixed_ephem(az, el, times):
    """
    Creates a custom ephemeris file with fixed az and el
    at the times provided
    
    Parameters
    ----------
    az : float
        azimuth in degrees
    el : float
        elevation in degrees
    times : array_like
        times, in unix time steps

    Returns
    -------
    ephemeris : ndarray
        An array with 4 columns: TAI [ns], az, el, IR
    """
    ephem = np.zeros(shape=(len(times), 4))
    # Time in TAI [ns]
    ephem[:,0] = times
    ephem[:,0] += LEAP_SECONDS #adding leap seconds
    ephem[:,0] *= 1e9 #seconds to ns
    
    # Azimuth
    ephem[:,1] = np.round(az, 3)

    # Elevation
    ephem[:,2] = np.round(el, 3)

    # Keep inverse radius the same
    return ephem


def main():
    parser = argparse.ArgumentParser(
        description = 'Control and apply delay engine on RFSoC-boards')

    parser.add_argument('-lo', type=str, required=True,
        help = 'LO letter [a, b, c, d]')

    parser.add_argument('-refant', type=str,
        required = False,
        help = 'Reference antenna [%s]' %DEFAULT_REF_ANT)
    parser.add_argument('-telinfo', type=str,
        required = True,
        help = 'ITRF (telinfo) file')
    parser.add_argument('-fixed', required = True, type=str,
        help = 'Delay file to use')
    parser.add_argument('-phases', required = True, type=str,
        help = 'Frequency-dependent phases file to use')
    parser.add_argument('-noadvance', action='store_true', default=False,
        help = 'Do not advance the delay engine by the fixed term')
    parser.add_argument('-nophase', action='store_true', default=False,
        help = 'Do not apply phase solution')
    parser.add_argument('-zero', action='store_true', default=False,
        help = 'Simply apply zero delay/phase, ignore everything')


    # Parse cmd line arguments
    args = parser.parse_args()

    assert args.lo in ALL_LO,\
            "Input correct LO letter (input: %s)" %args.lo

    logname = '/opt/mnt/log/delay_engine_%s.log' %args.lo
    #logname = './test.log'
    logging.basicConfig(filename=logname, filemode='a',
            format='%(asctime)s %(levelname)s:%(message)s',
            level=logging.INFO)

    logging.info("Started delay engine")

    logging.info("Using LO: %s" %args.lo)

    #fixed_delays_all = pd.read_csv(args.fixed, sep=" ", index_col=None)
    #phases_all = pd.read_csv(args.phases, sep=" ", index_col=False)

    logging.info("Using file [%s] for fixed delays" %args.fixed)
    logging.info("Using file [%s] for phase solutions" %args.phases)


    # Select LO
    rfsoc_tab = snap_config.ATA_SNAP_TAB[
            snap_config.ATA_SNAP_TAB.LO == args.lo]
    rfsoc_hostnames = []

    rfsoc_hostnames = list(rfsoc_tab.snap_hostname)
    antnames = [ant.upper() for ant in rfsoc_tab.ANT_name]


    # initialise the rfsoc feng objects
    rfsocs = snap_control.init_snaps(rfsoc_hostnames)
    for rfsoc in rfsocs:
        rfsoc.fpga.get_system_information(snap_config.ATA_CFG['RFSOCFPG'])
        rfsoc.logger.setLevel(logging.INFO)
    logging.info("Read FPGA files")

    hash_fixed   = ""
    hash_phases  = ""
    hash_telinfo = ""


    while True:
        print("New iteration for LO %s" %args.lo)
        new_hash_telinfo = get_hash(args.telinfo)
        if new_hash_telinfo != hash_telinfo:
            logging.info("New telinfo detected, updating values")
            print("New telinfo detected, updating values")
            # Get ITRF coordinates of the antennas
            # and define antenna positions
            if args.telinfo.endswith("toml") or args.telinfo.endswith("tml"):
                telinfo = toml.load(args.telinfo)
                itrf = parse_toml(telinfo)
                ata = EarthLocation(lat= telinfo['latitude'],
                        lon= telinfo['longitude'], 
                        height=float(telinfo['altitude']))
                logging.info("Loaded TOML file [%s]" %args.telinfo)
            else:
                raise NotImplementedError("telinfo should be a .toml file")

            if args.refant:
                refant = args.refant.upper()
            elif 'reference_antenna_name' in telinfo:
                refant = telinfo['reference_antenna_name'].upper()
            else:
                refant = DEFAULT_REF_ANT

            logging.info("Using %s as reference antenna" %refant)
            print("Using % as reference antenna" %refant)

            itrf_sub = itrf.loc[antnames]
            irefant = itrf_sub.index.values.tolist().index(refant)
            hash_telinfo = new_hash_telinfo

        # checking for new delay solution
        new_hash_fixed = get_hash(args.fixed)
        if new_hash_fixed != hash_fixed:
            logging.info("New delay solution detected, updating fixed delays")
            print("New delay solution detected, updating fixed delays")
            fixed_delays_x, fixed_delays_y = load_fixed_delays(args.fixed, antnames)
            hash_fixed = new_hash_fixed

        # checking for new phase solution
        new_hash_phases = get_hash(args.phases)
        if new_hash_phases != hash_phases:
            logging.info("New phase solution detected, updating bandpass")
            print("New phase solution detected, updating bandpass")
            phases_x, phases_y = load_bandpass(args.phases, antnames)
            hash_phases = new_hash_phases
            update_bandpass(rfsocs, phases_x, phases_y)
            print("Phases have been updated")
            logging.info("Phases have been updated")

        # Parse the LO frequency automatically from the ata_control
        for i in range(5):
            try:
                lo_freq = ata_control.get_sky_freq(args.lo)
            except requests.exceptions.ConnectionError as e:
                logging.warning("Connection error obtained on get_sky_freq")
                print("Connection error obtained on get_sky_freq")
                time.sleep(1)
                continue
            break


        t = np.floor(time.time())
        tts = [3, 20+3] # Interpolate between t=3 
        tts = np.array(tts) + t

        ts = Time(tts, format='unix')

        for i in range(5):
            try:
                source_eph = ata_control.get_eph_source([refant.lower()])[refant.lower()]
            except requests.exceptions.ConnectionError as e:
                logging.warning("Connection error obtained on get_eph_source")
                print("Connection error obtained on get_eph_source")
                time.sleep(1)
                continue
            break
        print("Source ephemeris: %s" %source_eph)

        # We are probably parked
        # I'll create my own "ephemeris" at the position of the reference
        # antenna, assuming all other antennas are pointing there
        if source_eph == "AzEl" or source_eph == "Stay put":
            az, el = ata_control.get_az_el([refant.lower()])[refant.lower()]

            # Creating a time axis from tts[0]-20 to tts[1]+20 seconds
            # to create the "fixed" ephemeris file
            times = np.arange(tts[0]-20, tts[1]+20, 3)
            ephem = create_fixed_ephem(az, el, times)

        # We have a real source / ephemeris loaded, let's try and get it
        else:
            # Now try retrieving the ephemeris file
            try:
                ephem = ata_control.retrieve_ephemeris(source_eph)
                ephem = np.array(ephem)
            except ATARestException as e:
                # problem retrieving the ephemeris
                # revert to solution of "AzEl"/"Stay put"
                print(e)
                az, el = ata_control.get_az_el([refant.lower()])[refant.lower()]

                # Creating a time axis from tts[0]-20 to tts[1]+20 seconds
                # to create the "fixed" ephemeris file
                times = np.arange(tts[0]-20, tts[1]+20, 3)
                ephem = create_fixed_ephem(az, el, times)

        # At this point we have an ephemeris file in 
        # format of TAI [ns]. Let's convert it to unix timestamp [sec]
        if len(ephem.shape) != 2:
            # sometimes the restgw returns an empty list ([]) as ephemeris
            # so just move on as quickly as possible
            logging.critical("shape of ephemeris is not 2d array")
            logging.critical(ephem)
            continue

        ephem[:,0] *= 1e-9 # ns to seconds
        ephem[:,0] -= LEAP_SECONDS


        ######################################################################
        # ASSUMPTION:
        # -----------
        # I assume that the ephemeris file can be linearly interpolated 
        # between the value ts[0] and ts[1]. In other words, complicated 
        # ephemera that change coordinates in a non-linear way will not be 
        # properly modelled.
        # This is a fair assumption, however, because even LEOs orbits are 
        # pretty linear over 20 seconds
        ######################################################################

        # Interpolate through ephemeris file and find az and elevation 
        # at ts[0] and ts[-1]
        if not ephem[0,0] < ts[0].value < ts[1].value < ephem[-1,0]:
            # This should in theory never happen
            logging.warning("time range [%i, %i] not within ephemeris bounds"\
                    " [%i, %i]" %(ts[0].value, ts[1].value, ephem[0,0], 
                        ephem[-1,0]))
            print("We're out of range in ephemeris file!!")
            time.sleep(1)
            continue
            
        az1 = np.interp(ts[0].value, ephem[:,0], ephem[:,1])
        az2 = np.interp(ts[-1].value, ephem[:,0], ephem[:,1])

        el1 = np.interp(ts[0].value, ephem[:,0], ephem[:,2])
        el2 = np.interp(ts[-1].value, ephem[:,0], ephem[:,2])

        position1 = SkyCoord(alt=el1 * u.deg, az=az1 * u.deg, 
                frame=AltAz(obstime=ts[0], location=ata)).transform_to('icrs')
        position2 = SkyCoord(alt=el2 * u.deg, az=az2 * u.deg, 
                frame=AltAz(obstime=ts[-1], location=ata)).transform_to('icrs')

        # compute the UVWs for both az/el positions
        uvw1 = compute_uvw(ts[0],  position1, itrf_sub[['x','y','z']],
                itrf_sub[['x','y','z']].values[irefant])

        uvw2 = compute_uvw(ts[-1], position2, itrf_sub[['x','y','z']],
                itrf_sub[['x','y','z']].values[irefant])

        # "w" coordinate represents the goemetric delay in light-meters
        w1 = uvw1[...,2]
        w2 = uvw2[...,2]

        # Add fixed delays + convert to seconds
        delay1_x = fixed_delays_x + (w1/const.c.value)
        delay2_x = fixed_delays_x + (w2/const.c.value)
        delay1_y = fixed_delays_y + (w1/const.c.value)
        delay2_y = fixed_delays_y + (w2/const.c.value)

        # advance all the B-engines forward in time
        if not args.noadvance:
            delay1_x += ADVANCE_TIME
            delay2_x += ADVANCE_TIME
            delay1_y += ADVANCE_TIME
            delay2_y += ADVANCE_TIME

        # make sure we're not providing large delays
        assert np.all((delay1_x < MAX_DELAY) & (delay1_x > 0)),\
                "Delays are not within 0 and max_delay: %.2e" %MAX_DELAY
        assert np.all((delay2_x < MAX_DELAY) & (delay2_x > 0)),\
                "Delays are not within 0 and max_delay: %.2e" %MAX_DELAY
        assert np.all((delay1_y < MAX_DELAY) & (delay1_y > 0)),\
                "Delays are not within 0 and max_delay: %.2e" %MAX_DELAY
        assert np.all((delay2_y < MAX_DELAY) & (delay2_y > 0)),\
                "Delays are not within 0 and max_delay: %.2e" %MAX_DELAY

        # Compute the delay rate in s/s
        rate_x = (delay2_x - delay1_x) / (tts[-1] - tts[0])
        rate_y = (delay2_y - delay1_y) / (tts[-1] - tts[0])

        # Using LO - BW/2 for fringe rate
        phase_x      = -2 * np.pi * (lo_freq*1e6 - BANDWIDTH/2.) * delay1_x
        phase_rate_x = -2 * np.pi * (lo_freq*1e6 - BANDWIDTH/2.) * rate_x
        phase_y      = -2 * np.pi * (lo_freq*1e6 - BANDWIDTH/2.) * delay1_y
        phase_rate_y = -2 * np.pi * (lo_freq*1e6 - BANDWIDTH/2.) * rate_y

        if args.zero:
            logging.info("Scratch the above, we're only apply 0 delays")
            #print("Zeroing all delays/phase")
            delay1_x = np.zeros_like(delay1_x)
            rate_x = np.zeros_like(rate_x)
            phase_x = np.zeros_like(phase_x)
            phase_rate_x = np.zeros_like(phase_rate_x)
            delay1_y = np.zeros_like(delay1_y)
            rate_y = np.zeros_like(rate_y)
            phase_y = np.zeros_like(phase_y)
            phase_rate_y = np.zeros_like(phase_rate_y)


        # In case we didn't make it in time before
        # the requested delay time, start a new
        # iteration as quickly as possible
        if time.time() > (ts[0].unix - 0.5):
            logging.warning("The delay time requested [%.2f] was in the "\
                    "past of this: %.2f!" %(ts[0].unix, time.time()))
            continue

        retry_fast = False
        for i,rfsoc in enumerate(rfsocs):
            try:
                rfsoc.set_delay_tracking(
                        [delay1_x[i]*1e9,     delay1_y[i]*1e9],
                        [rate_x[i]*1e9,       rate_y[i]*1e9],
                        [phase_x[i],      phase_y[i]],
                        [phase_rate_x[i], phase_rate_y[i]],
                        load_time = int(ts[0].unix),
                        invert_band=False
                        )
            # we got an exception on one of the boards,
            # try and set a delay asap
            except Exception as e:
                logging.critical("%s" %e.args[0])
                logging.critical("rfsoc [%s] returned the above error"\
                        "retrying to set delays asap!" %rfsoc.host)
                retry_fast = True
                break
            logging.debug("%s %i %.6f %.6f %.6f %.6f" \
                    %(rfsoc.host, int(ts[0].unix),
                        delay1_x[i]*1e9, rate_x[i]*1e9, phase_x[i], 
                        phase_rate_x[i]))
        logging.info("Wrote delay/phase values and rates, waiting for 10 seconds")

        if retry_fast:
            continue
        time.sleep(10)


if __name__ == "__main__":
    main()
